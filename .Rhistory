weightTfIdf(x, normalize =FALSE),
stopwords = TRUE))
dtm.idf.tidy <- tidy(dtm.idf)
dtm.idf.all <- summarise(group_by(dtm.idf.tidy, term), sum(count))
# # Cast into a Matrix object
# m.tdm.idf.tidy <- tdm.idf.tidy %>%
#   cast_sparse(document, term, count)
# list of presidents who did two terms in office
prex.out <- substr(speeches, 6, nchar(speeches)-4)
speeches.info <- as.data.frame(prex.out)
speeches.info <- cSplit(speeches.info, "prex.out", "-")
colnames(speeches.info)[1] <- "name"
colnames(speeches.info)[2] <- "term"
speeches.info$prex.out_3 <- NULL
president.list <- as.character(speeches.info[speeches.info$term==2,]$name)
print(president.list)
# update all dtms tables so that they contain only speeches given by presidents who stayed two terms in office
# see the file processing.R for details about the functions used in this chunk
dtm.tidy <- update.tables(dtm.tidy,president.list)
dtm.idf.tidy <- update.tables(dtm.idf.tidy,president.list)
dtm.all <- summarise(group_by(dtm.tidy, word), count = sum(count))
dtm.idf.all <- summarise(group_by(dtm.idf.tidy, word), count = sum(count))
ui <- fluidPage(selectInput(inputId = "data","", president.list),
plotOutput(outputId = "wordclouds")
)
server <- function(input, output) {
data <- reactive({
dtm.idf.tidy[dtm.idf.tidy$document==term1,]
})
output$wordclouds <- renderPlot({
wordcloud(data()$word, data()$count,
main = "1st Term",
scale=c(5,0.5),
max.words=70,
min.freq=1,
random.order=FALSE,
rot.per=0.0,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
})
}
shinyApp(ui = ui, server = server)
packages.used=c("tidytext", "dplyr", "tm", "ggplot2", "wordcloud", "rvest",
"tibble", "qdap", "sentimentr", "gplots", "syuzhet",
"factoextra", "beeswarm", "scales", "RColorBrewer", "RANN",
"topicmodels", "splitstackshape", "tidyr", "shiny", "gridExtra")
# check packages that need to be installed.
packages.needed=setdiff(packages.used, intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
# load packages
library("tidytext")
library("dplyr")
library("tm")
library("ggplot2")
library("wordcloud")
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("topicmodels")
library("splitstackshape")
library("tidyr")
library("shiny")
library("gridExtra")
# source functions
source("../lib/processing.R")
source("../lib/displaying.R")
source("./lib/processing.R")
source("./lib/displaying.R")
source("./lib/processing.R")
source("./lib/displaying.R")
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-Proj1-MarieSlz")
source("./lib/processing.R")
source("./lib/displaying.R")
print(R.version)
folder.path = "../data/InauguralSpeeches/"
speeches = list.files(path = folder.path, pattern = "*.txt")
ff.all <- Corpus(DirSource(folder.path))
folder.path = "./data/InauguralSpeeches/"
speeches = list.files(path = folder.path, pattern = "*.txt")
ff.all <- Corpus(DirSource(folder.path))
# remove white Spaces, transform to lower case, remove stop words, remove empty words and remove punctuation
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
# compute Term-Document Matrix
tdm <- TermDocumentMatrix(ff.all)
# compute Document-Term Matrix
dtm <- DocumentTermMatrix(ff.all)
dtm.tidy <- tidy(dtm)
dtm.all <- summarise(group_by(dtm.tidy, term), sum(count))
# # inspect dtm or tdm
# inspect(tdm[100:105,25:30])
# inspect(dtm[25:27,100:104])
# dim(dtm.idf)
#Note: I am using both tdm and dtm, because it's easier to use one or the other for some applications later on.
# Compute TermDocument Matrix weighted with TF-IDF principle
tdm.idf <- TermDocumentMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x, normalize =FALSE),
stopwords = TRUE))
# Compute DocumentTerm Matrix weighted with TF-IDF principle
dtm.idf <- DocumentTermMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x, normalize =FALSE),
stopwords = TRUE))
dtm.idf.tidy <- tidy(dtm.idf)
dtm.idf.all <- summarise(group_by(dtm.idf.tidy, term), sum(count))
# # Cast into a Matrix object
# m.tdm.idf.tidy <- tdm.idf.tidy %>%
#   cast_sparse(document, term, count)
# list of presidents who did two terms in office
prex.out <- substr(speeches, 6, nchar(speeches)-4)
speeches.info <- as.data.frame(prex.out)
speeches.info <- cSplit(speeches.info, "prex.out", "-")
colnames(speeches.info)[1] <- "name"
colnames(speeches.info)[2] <- "term"
speeches.info$prex.out_3 <- NULL
president.list <- as.character(speeches.info[speeches.info$term==2,]$name)
print(president.list)
# update all dtms tables so that they contain only speeches given by presidents who stayed two terms in office
# see the file processing.R for details about the functions used in this chunk
dtm.tidy <- update.tables(dtm.tidy,president.list)
dtm.idf.tidy <- update.tables(dtm.idf.tidy,president.list)
dtm.all <- summarise(group_by(dtm.tidy, word), count = sum(count))
dtm.idf.all <- summarise(group_by(dtm.idf.tidy, word), count = sum(count))
ui <- fluidPage(selectInput(inputId = "data","", president.list),
plotOutput(outputId = "wordclouds")
)
server <- function(input, output) {
data1 <- reactive({
dtm.idf.tidy[dtm.idf.tidy$document==paste0(input$data,"-1"),]
})
data2 <- reactive({
dtm.idf.tidy[dtm.idf.tidy$document==paste0(input$data,"-2"),]
})
output$wordclouds <- renderPlot({
layout(matrix(c(1,3,2,4), nrow=2, ncol=2), heights=c(0.5, 4))
#layout.show(4)
par(mar=c(1,0,0,0)) #margins
plot.new()
text(x=0.5, y=0.5, cex=2, "1st Term", font=4)
plot.new()
text(x=0.5, y=0.5, cex=2, "2nd Term", font=4)
wordcloud(data1()$word, data1()$count,
main = "1st Term",
scale=c(4,0.5),
max.words=70,
min.freq=1,
random.order=FALSE,
rot.per=0.0,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
wordcloud(data2()$word, data2()$count,
main = "2nd Term",
scale=c(4,0.5),
max.words=70,
min.freq=1,
random.order=FALSE,
rot.per=0.0,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
})
}
shinyApp(ui = ui, server = server, options = list(height = 600))
# get sentiments
dtm.idf.sentiment <- inner_join(dtm.idf.tidy,
get_sentiments("nrc"),
by=c("word"="word"))
# spread sentiments in different columns
dtm.idf.sentiment <- spread(dtm.idf.sentiment, sentiment, count, fill=0)
# compute a sentiment score for each speech
sentiment.score <- mutate(dtm.idf.sentiment, feeling = positive - negative)
sentiment.score <- summarise(group_by(sentiment.score, document, president, term),
score = sum(feeling))
c <- ggplot(sentiment.score, aes(x=sentiment.score$president,
y=sentiment.score$score,
fill=sentiment.score$term)) +
geom_bar(stat="identity", position = "dodge", width=.6) +
ylab("Sentiment Score") +
xlab("US Presidents") +
scale_fill_manual("Term", values=brewer.pal(9,"Set1")) +
theme(axis.text.x = element_text(angle = 45, size=12, hjust = 1))
c
# compute difference between score of speech one and score of speech two
sentiment.score.shift = as.data.frame(matrix(ncol=2, nrow=length(president.list)))
names(sentiment.score.shift)[names(sentiment.score.shift)=="V1"] <- "president"
names(sentiment.score.shift)[names(sentiment.score.shift)=="V2"] <- "score"
for (i in 1:length(president.list)){
a <- sentiment.score[(sentiment.score$president ==
president.list[i] & sentiment.score$term == "1"),"score"]
b <- sentiment.score[sentiment.score$president ==
president.list[i] & sentiment.score$term == "2","score"]
sentiment.score.shift$score[i] <- -(a-b)
sentiment.score.shift$president[i] <- president.list[i]
}
# assigne colour depending on the sign of the score
sentiment.score.shift$colour <- ifelse(sentiment.score.shift$score < 0,
"negative","positive")
sentiment.score.shift$score <- as.numeric(sentiment.score.shift$score)
d <- ggplot(sentiment.score.shift, aes(x=sentiment.score.shift$president,
y=sentiment.score.shift$score)) +
geom_bar(stat="identity", width=.6, aes(fill = colour)) +
ylab("Sentiment Score Shift") +
xlab("US Presidents") +
scale_fill_manual("Term", values=c(positive="steelblue",negative="firebrick1")) +
theme(axis.text.x = element_text(angle = 45, size=12, hjust = 1))
d
# selecting positive words
word.score.positive <- summarise(group_by(dtm.idf.sentiment, word), score=sum(positive))
word.score.positive <- arrange(word.score.positive, desc(score))
# plotting
word.score.positive %>%
arrange(score) %>%
mutate(word = factor(word, word)) %>%
top_n(15) %>%
ggplot(aes(x=word, y=score)) +
geom_bar(stat="identity", fill="#FF9999") +
xlab("Positive Words") +
ggtitle("Positive words impacting the overall score") +
coord_flip()
# selecting negative words
word.score.negative <- summarise(group_by(dtm.idf.sentiment, word), score=sum(negative))
word.score.negative <- arrange(word.score.negative, desc(score))
# plotting
word.score.negative %>%
arrange(score) %>%
mutate(word = factor(word, word)) %>%
top_n(15) %>%
ggplot(aes(x=word, y=score)) +
geom_bar(stat="identity", fill="#999999") +
xlab("Negative Words") +
ggtitle("Negative words impacting the overall score") +
coord_flip()
# selecting negative words by term
word.negative.term <- summarise(group_by(dtm.idf.sentiment, word, term),
score=sum(negative))
word.negative.term.1 <- filter(word.negative.term, term==1)
word.negative.term.1 <- arrange(word.negative.term.1, desc(score))
word.negative.term.2 <- filter(word.negative.term, term==2)
word.negative.term.2 <- arrange(word.negative.term.2, desc(score))
a <- ggplot(word.negative.term.1[1:15,],aes(x=reorder(word, score), y=score)) +
geom_bar(stat="identity", fill="midnightblue") +
xlab("") +
ylab("Scores") +
ggtitle("1st Term") +
coord_flip()
b <- ggplot(word.negative.term.2[1:15,], aes(x=reorder(word, score), y=score)) +
geom_bar(stat="identity", fill="firebrick") +
xlab("") +
ylab("Scores") +
ggtitle("2nd Term") +
coord_flip()
grid.arrange(a, b, nrow=1, ncol=2)
ui <- fluidPage(selectInput(inputId = "data","", president.list),
plotOutput(outputId = "plot")
)
server <- function(input, output) {
dfa <- reactive({
summarise(group_by(dtm.idf.sentiment, word, term, president), score=sum(negative))
})
df <- reactive({
filter(dfa(), president==input$data)
})
df1 <- reactive ({
filter(df(), term==1) %>%
arrange(desc(score))
})
df2 <- reactive ({
filter(df(), term==2) %>%
arrange(desc(score))
})
# df1 <- reactive ({
#   arrange(df1(), desc(score))
# })
# df2 <- reactive ({
#   arrange(df2(), desc(score))
# })
output$plot <- renderPlot({
a <- ggplot(df1()[1:15,],aes(x=reorder(word, score), y=score)) +
geom_bar(stat="identity", fill="midnightblue") +
xlab("") +
ylab("Scores") +
ggtitle("1st Term") +
coord_flip()
b <- ggplot(df2()[1:15,], aes(x=reorder(word, score), y=score)) +
geom_bar(stat="identity", fill="firebrick") +
xlab("") +
ylab("Scores") +
ggtitle("2nd Term") +
coord_flip()
grid.arrange(a, b, nrow=1, ncol=2)
})
}
shinyApp(ui = ui, server = server, options = list(height = 600))
ggplot.flow(ff.all, president.list[1])
president.list
ggplot.flow(ff.all, "AbrahamLincoln")
ggplot.flow(ff.all, "RichardNixon")
ggplot.flow(ff.all, "GeorgeWBush")
ggplot.flow(ff.all, "RonaldReagan")
ggplot.flow(ff.all, "BarackObama")
View(dtm.idf.sentiment)
emotion.score <- summarise(group_by(dtm.idf.sentiment, term, president),
anger.score = sum(anger),
joy.score = sum(joy))
View(emotion.score)
emotion.score <- summarise(group_by(dtm.idf.sentiment, term, president),
anger.score = sum(anger),
joy.score = sum(joy),
anticipation.score = sum(anticipation),
digust.score = sum(disgust),
fear.score = sum(score),
sadness.score = sum(sadness),
surprise.score = sum(surprise),
trust.score = sum(trust))
emotion.score <- summarise(group_by(dtm.idf.sentiment, term, president),
anger.score = sum(anger),
joy.score = sum(joy),
anticipation.score = sum(anticipation),
digust.score = sum(disgust),
fear.score = sum(fear),
sadness.score = sum(sadness),
surprise.score = sum(surprise),
trust.score = sum(trust))
test <- gather(emotion.score, score, emotion, c("joy","anger"))
View(emotion.score)
test <- gather(emotion.score, score, emotion, joy)
View(emotion.score)
test <- gather(emotion.score, score, emotion, joy.score)
View(test)
test <- gather(emotion.score, score, emotion, c("joy.score","anger.score"))
test <- gather(emotion.score, score, emotion, c(joy.score,anger.score))
View(test)
emotion.score <- gather(emotion.score, score, emotion,
c(joy.score, anger.score, disgust.score, fear.score,
anticipation.score, sadness.score, surprise.score, sadness.score))
emotion.score <- summarise(group_by(dtm.idf.sentiment, term, president),
anger.score = sum(anger),
joy.score = sum(joy),
anticipation.score = sum(anticipation),
disgust.score = sum(disgust),
fear.score = sum(fear),
sadness.score = sum(sadness),
surprise.score = sum(surprise),
trust.score = sum(trust))
emotion.score <- gather(emotion.score, score, emotion,
c(joy.score, anger.score, disgust.score, fear.score,
anticipation.score, sadness.score, surprise.score, sadness.score))
emotion.score$emotion <- substr(emotion.score$emotion, 0, nchar(emotion.score$emotion)-6)
emotion.score <- summarise(group_by(dtm.idf.sentiment, term, president),
anger.score = sum(anger),
joy.score = sum(joy),
anticipation.score = sum(anticipation),
disgust.score = sum(disgust),
fear.score = sum(fear),
sadness.score = sum(sadness),
surprise.score = sum(surprise),
trust.score = sum(trust))
emotion.score <- gather(emotion.score, emotion, score,
c(joy.score, anger.score, disgust.score, fear.score,
anticipation.score, sadness.score, surprise.score, sadness.score))
emotion.score$emotion <- substr(emotion.score$emotion, 0, nchar(emotion.score$emotion)-6)
emotion.score <- summarise(group_by(dtm.idf.sentiment, term, president),
anger.score = sum(anger),
joy.score = sum(joy),
anticipation.score = sum(anticipation),
disgust.score = sum(disgust),
fear.score = sum(fear),
sadness.score = sum(sadness),
surprise.score = sum(surprise),
trust.score = sum(trust))
emotion.score <- gather(emotion.score, emotion, score,
c(joy.score, anger.score, disgust.score, fear.score,
anticipation.score, sadness.score, surprise.score, sadness.score
trust.score))
emotion.score$emotion <- substr(emotion.score$emotion, 0, nchar(emotion.score$emotion)-6)
emotion.score <- summarise(group_by(dtm.idf.sentiment, term, president),
anger.score = sum(anger),
joy.score = sum(joy),
anticipation.score = sum(anticipation),
disgust.score = sum(disgust),
fear.score = sum(fear),
sadness.score = sum(sadness),
surprise.score = sum(surprise),
trust.score = sum(trust))
emotion.score <- gather(emotion.score, emotion, score,
c(joy.score, anger.score, disgust.score, fear.score,
anticipation.score, sadness.score, surprise.score, sadness.score,
trust.score))
emotion.score$emotion <- substr(emotion.score$emotion, 0, nchar(emotion.score$emotion)-6)
emotion.score <- summarise(group_by(dtm.idf.sentiment, term),
anger.score = sum(anger),
joy.score = sum(joy),
anticipation.score = sum(anticipation),
disgust.score = sum(disgust),
fear.score = sum(fear),
sadness.score = sum(sadness),
surprise.score = sum(surprise),
trust.score = sum(trust))
emotion.score <- gather(emotion.score, emotion, score,
c(joy.score, anger.score, disgust.score, fear.score,
anticipation.score, sadness.score, surprise.score, sadness.score,
trust.score))
emotion.score$emotion <- substr(emotion.score$emotion, 0, nchar(emotion.score$emotion)-6)
emotion.score <- summarise(group_by(dtm.idf.sentiment, term, president),
anger.score = sum(anger),
joy.score = sum(joy),
anticipation.score = sum(anticipation),
disgust.score = sum(disgust),
fear.score = sum(fear),
sadness.score = sum(sadness),
surprise.score = sum(surprise),
trust.score = sum(trust))
emotion.score <- gather(emotion.score, emotion, score,
c(joy.score, anger.score, disgust.score, fear.score,
anticipation.score, sadness.score, surprise.score, sadness.score,
trust.score))
emotion.score$emotion <- substr(emotion.score$emotion, 0, nchar(emotion.score$emotion)-6)
g <- ggplot(emotion.score, aes(x=emotion, y=score, fill=president)) +
geom_bar(stat="identity")
g
g <- ggplot(emotion.score, aes(x=emotion, y=score, fill=president)) +
geom_bar(stat="identity") +
coord_flip()
g
g <- ggplot(emotion.score, aes(x=emotion, y=score, fill=president)) +
geom_bar(stat="identity") +
coord_flip() +
xlab("") +
facet_wrap(~term, nrow=2)
g
emotion.score <- filter(emotion.score, term=c(1,2))
emotion.score <- filter(emotion.score, term==c(1,2))
g <- ggplot(emotion.score, aes(x=emotion, y=score, fill=president)) +
geom_bar(stat="identity") +
coord_flip() +
xlab("") +
facet_wrap(~term, nrow=2)
g
g <- ggplot(emotion.score, aes(x=emotion, y=score, fill=president)) +
geom_bar(stat="identity", position="stack") +
coord_flip() +
xlab("") +
facet_wrap(~term, nrow=2)
g
g <- ggplot(emotion.score, aes(x=emotion, y=score, fill=president)) +
geom_bar(stat="identity", position="stack") +
coord_flip() +
xlab("") +
facet_wrap(~term, nrow=2) +
scale_manual_fill(main="")
g
emotion.score <- filter(emotion.score, term==c(1,2))
g <- ggplot(emotion.score, aes(x=emotion, y=score, fill=president)) +
geom_bar(stat="identity", position="stack") +
coord_flip() +
xlab("") +
facet_wrap(~term, nrow=2) +
scale_fill_manual(main="")
g
g <- ggplot(emotion.score, aes(x=emotion, y=score, fill=president)) +
geom_bar(stat="identity", position="stack") +
coord_flip() +
xlab("") +
facet_wrap(~term, nrow=2) +
scale_fill_manual("")
g
g <- ggplot(emotion.score, aes(x=emotion, y=score, fill=president)) +
geom_bar(stat="identity", position="stack") +
coord_flip() +
xlab("") +
facet_wrap(~term, nrow=2)
g
emotion.score <- summarise(group_by(dtm.idf.sentiment, term, president),
anger.score = sum(anger),
joy.score = sum(joy),
anticipation.score = sum(anticipation),
disgust.score = sum(disgust),
fear.score = sum(fear),
sadness.score = sum(sadness),
surprise.score = sum(surprise),
trust.score = sum(trust))
emotion.score <- gather(emotion.score, emotion, score,
c(joy.score, anger.score, disgust.score, fear.score,
anticipation.score, sadness.score, surprise.score, sadness.score,
trust.score))
emotion.score$emotion <- substr(emotion.score$emotion, 0, nchar(emotion.score$emotion)-6)
emotion.score <- filter(emotion.score, term==c(1,2))
g <- ggplot(emotion.score, aes(x=emotion, y=score, fill=president)) +
geom_bar(stat="identity", position="stack") +
coord_flip() +
xlab("") +
facet_wrap(~term, nrow=2)
g
